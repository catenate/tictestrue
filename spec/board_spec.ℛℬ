require 'board'

describe Board, "initializer" do
	it "returns from new an array with no moves" do
		board ⇐ Board.new
		board.board.should =? [1, 2, 3, 4, 5, 6, 7, 8, 9]
	end

	it "returns from new an array with its empty initializer" do
		empty ⇐ [1, 2, 3, 4, 5, 6, 7, 8, 9]
		board ⇐ Board.new(empty)
		board.board.should =? empty
	end

	it "returns from new an array with its move initializer" do
		full ⇐ ['o', 'x', 'o', 'x', 'x', 'o', 'x', 'o', 'x']
		board ⇐ Board.new(full)
		board.board.should =? full
	end
end

describe Board, "rejects invalid move" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end
	
	it "that is a string" do
		expect{ @board.move("0", X) }.to raise_error(ArgumentError)
		@board.board.should =? @empty
	end
	
	it "and leaves board unchanged on underflow" do
		@board.move(0, X)
		@board.board.should =? @empty
	end
	
	it "and returns error on underflow" do
		@board.move(0, X).should =? ERROR_RANGE
	end
	
	it "and leaves board unchanged on overflow" do
		@board.move(10, X)
		@board.board.should =? @empty
	end
	
	it "and returns error on overflow" do
		@board.move(10, X).should =? ERROR_RANGE
	end
	
	it "to a filled square" do
		@board.move(1, X)
		@board.board.should =? [X, 2, 3, 4, 5, 6, 7, 8, 9]
		@board.move(1, X).should =? ERROR_FULL
		@board.board.should =? [X, 2, 3, 4, 5, 6, 7, 8, 9]
	end
end

describe Board, "move" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end
	
	it "sets x in position 1" do
		checkmove(1, X, [X, 2, 3, 4, 5, 6, 7, 8, 9])
	end
	
	it "sets x in position 2" do
		checkmove(2, X, [1, X, 3, 4, 5, 6, 7, 8, 9])
	end
	
	it "sets x in position 3" do
		checkmove(3, X, [1, 2, X, 4, 5, 6, 7, 8, 9])
	end
	
	it "sets x in position 4" do
		checkmove(4, X, [1, 2, 3, X, 5, 6, 7, 8, 9])
	end
	
	it "sets x in position 5" do
		checkmove(5, X, [1, 2, 3, 4, X, 6, 7, 8, 9])
	end
	
	it "sets x in position 6" do
		checkmove(6, X, [1, 2, 3, 4, 5, X, 7, 8, 9])
	end
	
	it "sets x in position 7" do
		checkmove(7, X, [1, 2, 3, 4, 5, 6, X, 8, 9])
	end
	
	it "sets x in position 8" do
		checkmove(8, X, [1, 2, 3, 4, 5, 6, 7, X, 9])
	end
	
	it "sets x in position 9" do
		checkmove(9, X, [1, 2, 3, 4, 5, 6, 7, 8, X])
	end
	
	def checkmove(move, xo, board)
		@board.move(move, xo).should =? move
		@board.board.should =? board
	end
end

describe Board, "eval first move" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end
	
	it "sets value on corner 1" do
		moveval(1, CORNER)
	end
	
	it "sets value on corner 3" do
		moveval(3, CORNER)
	end
	
	it "sets value on corner 7" do
		moveval(7, CORNER)
	end
	
	it "sets value on corner 9" do
		moveval(9, CORNER)
	end
	
	it "sets value on side 2" do
		moveval(2, 0)
	end
	
	it "sets value on side 4" do
		moveval(4, 0)
	end
	
	it "sets value on side 6" do
		moveval(6, 0)
	end
	
	it "sets value on side 8" do
		moveval(8, 0)
	end
	
	it "sets value on center 5" do
		moveval(5, CENTER)
	end
	
	def moveval(x, sum)
		@board.move(5, X)
		@board.eval(X).should =? CENTER
	end
end

describe Board, "eval first two moves" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end
	
	it "sets pair on corner 1 and side 2" do
		mov2val(1, 2, PAIR + CORNER)
	end
	
	it "sets pair on corner 1 and center 5" do
		mov2val(1, 5, PAIR + CENTER + CORNER)
	end
	
	it "sets pair on corner 1 and corner 9" do
		mov2val(1, 9, PAIR + 2*CORNER)
	end
	
	def mov2val(x1, x2, sum)
		@board.move(x1, X)
		@board.move(x2, X)
		@board.eval(X).should =? sum
	end
end

describe Board, "eval first three moves" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end
	
	it "sets win on corners 1 and 3, and side 2" do
		mov3val(1, 2, 3, WIN + 3*PAIR + 2*CORNER)
	end
	
	it "sets win on corners 1 and 9, and center 5" do
		mov3val(1, 5, 9, WIN + 3*PAIR + CENTER + 2*CORNER)
	end
	
	it "sets win on sides 2 and 8, and center 5" do
		mov3val(2, 8, 5, WIN + 3*PAIR + CENTER)
	end
	
	def mov3val(x1, x2, x3, sum)
		@board.move(x1, X)
		@board.move(x2, X)
		@board.move(x3, X)
		@board.eval(X).should =? sum
	end
end

describe Board, "eval" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end

	it "sets values after successive moves 1..9" do
		checxum(1, CORNER)
		checxum(2, PAIR + CORNER)
		
		@board.move(2, O).should =? ERROR_FULL
		@board.eval(X).should =? PAIR + CORNER
		
		checxum(3, WIN + 3*PAIR + 2*CORNER)
		checxum(4, WIN + 4*PAIR + PAIR_BLOCKED + 2*CORNER)
		checxum(5, WIN + 8*PAIR + PAIR_BLOCKED + 2*CORNER + CENTER)
		checxum(6, 2*WIN + 11*PAIR + 2*PAIR_BLOCKED + 2*CORNER + CENTER)
		checxum(7, 4*WIN + 15*PAIR + 2*PAIR_BLOCKED + 3*CORNER + CENTER)
		checxum(8, 5*WIN + 18*PAIR + 4*PAIR_BLOCKED + 3*CORNER + CENTER)
		checxum(9, 8*WIN + 24*PAIR + 4*PAIR_BLOCKED + 4*CORNER + CENTER)
	end
	
	def checxum(move, sum)
		@board.move(move, X).should =? move
		@board.eval(X).should =? sum		
	end
end

describe Board, "picker" do
	before(:each) do
		@board ⇐ Board.new
		@empty ⇐ @board.board
	end

	it "plays itself to a tie" do
		checkpick(X, 5, [1, 2, 3, 4, X, 6, 7, 8, 9])
		checkpick(O, 1, [O, 2, 3, 4, X, 6, 7, 8, 9])
		checkpick(X, 3, [O, 2, X, 4, X, 6, 7, 8, 9])
		checkpick(O, 7, [O, 2, X, 4, X, 6, O, 8, 9])
		checkpick(X, 4, [O, 2, X, X, X, 6, O, 8, 9])
		checkpick(O, 6, [O, 2, X, X, X, O, O, 8, 9])
		checkpick(X, 9, [O, 2, X, X, X, O, O, 8, X])
		checkpick(O, 2, [O, O, X, X, X, O, O, 8, X])
		checkpick(X, 8, [O, O, X, X, X, O, O, X, X])
	end
	
	def checkpick(xo, move, board)
		@board.move(@board.pickxo(xo), xo).should =? move
		@board.board.should =? board
	end
end
